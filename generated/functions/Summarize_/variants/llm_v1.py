
# This file is autogenerated by the gloo compiler
# Do not edit this file directly
# (skip unused imports)
# ruff: noqa: F401
# flake8: noqa
# pylint: skip-file
# isort: skip_file
from ....clients import GPT35Client


import typing
import json
from gloo_py import LLMVariant
from gloo_py.stringify import (
    StringifyBase,
    StringifyError,
    StringifyNone,
    StringifyBool,
    StringifyInt,
    StringifyChar,
    StringifyString,
    StringifyFloat,
    StringifyEnum,
    StringifyUnion,
    StringifyOptional,
    StringifyList,
    StringifyClass,
    FieldDescription,
    EnumFieldDescription,
    StringifyRemappedField,
    StringifyCtx
)

prompt = """\
Extract data from the following TEXT that is a request for public records from a government agency.

EXAMPLE STRUCTURE:
Overall summary of main text: 1-4 sentences.
Overall summary of what the correspondence is about if it exists. Only include details about the public records request. No need to include the actual redacted records.
Important dates:
Any pending fees:
Whether this agency can work on this request. If not, why not, and who may be able to work on it instead?
Next step for this request:


Agency's response to the request:
###
{@input}
###

Summary of agency's response:"""

stringifiers: typing.List[typing.Any] = []
def gen_stringify() -> StringifyBase[str]:
    with StringifyCtx():
        OUTPUT_STRINGIFY = StringifyString()
        stringifiers.append(OUTPUT_STRINGIFY)
        
        return OUTPUT_STRINGIFY

OUTPUT_STRINGIFY = gen_stringify()



def parser_middleware(raw_llm_output: str) -> str:
    return raw_llm_output

def custom_vars() -> typing.Dict[str, str]:
    return {}


async def parser(raw_llm_output: str) -> str:
    return OUTPUT_STRINGIFY.parse(parser_middleware(raw_llm_output))

async def prompt_vars(arg: str) -> typing.Dict[str, str]:
    vars = {
        'input': str(arg),
        
        'output.json': OUTPUT_STRINGIFY.json,
    }
    vars.update(custom_vars())
    for stringify in stringifiers:
        vars.update(**stringify.vars())
    vars.update(**OUTPUT_STRINGIFY.vars())
    return vars

Variantv1 = LLMVariant[str, str](
    'Summarize', 'v1', prompt=prompt, client=GPT35Client, parser=parser, prompt_vars=prompt_vars)

async def RunVariant_v1(arg: str) -> str:
    return await Variantv1.run(arg)
