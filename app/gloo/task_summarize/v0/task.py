import typing
from gloo_py import GlooLLMTaskInterface, LLMClient, OpenAILLMClient
from ...types import SummarizeInputModel, SummarizeOutputModel
from .generated import summarize__Definition, VARS
import asyncio
import json


class summarize(GlooLLMTaskInterface):
    """
    This file is autogenerated by gloo.
    Only modify functions that are prefixed with override_.
    Do not change function signatures for any functions as that may lead to unexpected behavior.
    """

    # The default name is the class name.
    # If you want to change it, uncomment the following function.
    # def override_name(self) -> str:
    #    return "summarize"

    # The default client is OpenAILLMClient, gpt-3.5-turbo (latest model), temperature=0.
    # If you want to change it, uncomment the following function.
    #
    # Alternatively, you can configure a global default client.
    #
    # > from gloo_py import set_default_llm_client, OpenAILLMClient
    # > set_default_llm_client(OpenAILLMClient(model_name="gpt-4", temperature=1))
    #

    # def override_llm_client(self) -> LLMClient:
    #    return OpenAILLMClient(model_name="gpt-3.5-turbo", temperature=0)

    def override_prompt(self) -> str:
        # Prompts are auto dedented and trimmed at the start. The end of the prompt is not trimmed.
        return f"""
        Extract data from the following TEXT that is a request for public records from a government agency.

        EXAMPLE STRUCTURE:
        Overall summary of main text: 1-4 sentences.
        Overall summary of what the correspondence is about if it exists. Only include details about the public records request. No need to include the actual redacted records.
        Important dates: 
        Any pending fees: 
        Whether this agency can work on this request. If not, why not, and who may be able to work on it instead?
        Next step for this request:


        Agency's response to the request:
        ###
        {VARS.input.text}
        ###

        

        Summary of agency's response: 
        """

    # Prompt paramters are variables that you can refer to in your prompt using
    # {{var_name}}. These are static, and are not passed in at runtime. variables
    # allow you to segment your prompt into pieces, and query these individual pieces
    # separately in the analytics dashboard.
    #
    # def override_static_vars(self) -> typing.Dict[str, str]:
    #    return {
    #        # Custom fields that can be tracked to easily compare their impact.
    #        "var_name": "some_value"
    #    }

    # If you wish to format the input in your own manner you can do so here.
    # def override_input_vars(self, input: SummarizeInputModel) -> typing.Dict[str, str]:
    #    return {
    #        # Custom fields that can be tracked to easily compare their impact.
    #        "my_custom_var": input
    #    }

    # This function allows you to describe the output format for your data. You can use
    # this to indicate to the LLM what each field actually means.
    # A definition of each schema field may just be "string[]" or "number" for example, or a more natural language explanation like "the name of the user, as a string".
    # You can refer to any definitions you define here in your prompt by using
    # {VARS.output.summary.dfn}
    def override_output_definitions(self) -> summarize__Definition:
        return {
            "SummarizeOutput": {
                "summary": {
                    "alias": "summary",
                    "definition": "string",
                },
            },
        }

    # By default we assume the model outputs json and we parse it using the pydantic model.
    # GlooLLMTaskInterface.parse_raw converts aliases to their field names.
    # Highly recommend calling super().parse() if you override this function.
    def override_parser(
        self, model: typing.Type[SummarizeOutputModel], raw_llm_response: str
    ) -> SummarizeOutputModel:
        return SummarizeOutputModel(summary=raw_llm_response)


# You can add additional parameters to task.run.
# See docs for what paramters work: DOCS_LINK
async def run_summarize_v0_async(
    _in: SummarizeInputModel, **kwargs
) -> SummarizeOutputModel:
    task = summarize()
    return await task.run(_in, output_model=SummarizeOutputModel, **kwargs)


def run_summarize_v0_sync(_in: SummarizeInputModel, **kwargs) -> SummarizeOutputModel:
    return asyncio.run(run_summarize_v0_async(_in, **kwargs))


# Only the run_v0 function is directed exported.
__all__ = [
    "run_summarize_v0_async",
    "run_summarize_v0_sync",
    "SummarizeInputModel",
    "SummarizeOutputModel",
]
