# This file is autogenerated. Do not edit it directly.
import typing
from pydantic import BaseModel
from enum import StrEnum

class FieldTemplateVars:

    def __init__(self, name: str, as_input=False):
        self.__as_input = as_input
        self.name = f"{name}.name"
        self.desc = f"{name}.description"

    def __str__(self) -> str:
        return self.name


class FieldDescription(typing.TypedDict):
    name: str
    description: str


class SearchOutputModel(BaseModel):
    clues: typing.List[str]
    reasoning: str
    isAnswerInContext: str
    answer: str


class SearchOutputModel__Description(typing.TypedDict):
    clues: FieldDescription
    reasoning: FieldDescription
    isAnswerInContext: FieldDescription
    answer: FieldDescription


class SearchOutputModel__InputTemplateVars:
    def __init__(self, prefix: str = ""):
        self.clues = f"${prefix}clues$"
        self.reasoning = f"${prefix}reasoning$"
        self.isAnswerInContext = f"${prefix}isAnswerInContext$"
        self.answer = f"${prefix}answer$"
        self.__val = f"${prefix}SearchOutput.val$"
    
    def __str__(self):
        return self.__val

class SearchOutputModel__OutputTemplateVars:
    def __init__(self):
        self.clues = FieldTemplateVars(name="SearchOutput.clues")
        self.reasoning = FieldTemplateVars(name="SearchOutput.reasoning")
        self.isAnswerInContext = FieldTemplateVars(name="SearchOutput.isAnswerInContext")
        self.answer = FieldTemplateVars(name="SearchOutput.answer")
        self.json = "{SearchOutput.json}"


class SearchInputModel(BaseModel):
    query: str
    context: str


class SearchInputModel__Description(typing.TypedDict):
    query: FieldDescription
    context: FieldDescription


class SearchInputModel__InputTemplateVars:
    def __init__(self, prefix: str = ""):
        self.query = f"${prefix}query$"
        self.context = f"${prefix}context$"
        self.__val = f"${prefix}SearchInput.val$"
    
    def __str__(self):
        return self.__val

class SearchInputModel__OutputTemplateVars:
    def __init__(self):
        self.query = FieldTemplateVars(name="SearchInput.query")
        self.context = FieldTemplateVars(name="SearchInput.context")
        self.json = "{SearchInput.json}"


class ClassifyMovieOutputModel(BaseModel):
    clues: typing.List[str]
    reasoning: str
    classification: "GenreModel"
    friendlyResponse: str


class ClassifyMovieOutputModel__Description(typing.TypedDict):
    clues: FieldDescription
    reasoning: FieldDescription
    classification: FieldDescription
    friendlyResponse: FieldDescription


class ClassifyMovieOutputModel__InputTemplateVars:
    def __init__(self, prefix: str = ""):
        self.clues = f"${prefix}clues$"
        self.reasoning = f"${prefix}reasoning$"
        self.classification = GenreModel__InputTemplateVars(prefix=f"{prefix}classification.")
        self.friendlyResponse = f"${prefix}friendlyResponse$"
        self.__val = f"${prefix}ClassifyMovieOutput.val$"
    
    def __str__(self):
        return self.__val

class ClassifyMovieOutputModel__OutputTemplateVars:
    def __init__(self):
        self.clues = FieldTemplateVars(name="ClassifyMovieOutput.clues")
        self.reasoning = FieldTemplateVars(name="ClassifyMovieOutput.reasoning")
        self.classification = FieldTemplateVars(name="ClassifyMovieOutput.classification")
        self.friendlyResponse = FieldTemplateVars(name="ClassifyMovieOutput.friendlyResponse")
        self.json = "{ClassifyMovieOutput.json}"


class GenreModel(StrEnum):
    scifi = "scifi"
    fantasy = "fantasy"
    mystery = "mystery"

class GenreCases__Description(typing.TypedDict, total=False):
    scifi: FieldDescription
    fantasy: FieldDescription
    mystery: FieldDescription


class GenreModel__Description(typing.TypedDict):
    name: str
    description: str
    case_name_formatter: typing.Callable[[str], str]
    case_formatter: typing.Callable[[str, str], str]
    cases: GenreCases__Description


class GenreModel__InputTemplateVars:
    def __init__(self, prefix: str = ""):
        self.val = f"${prefix}Genre.val$"

    def __str__(self):
        return self.val

class GenreModel__OutputTemplateVars(FieldTemplateVars):
    def __init__(self, as_input: bool = False):
        super().__init__(name="Genre", as_input=as_input)
        self.cases = "{Genre.cases}"
        self.case_names = "{Genre.case_names}"


class ClassifyMovieInputModel(BaseModel):
    message: str


class ClassifyMovieInputModel__Description(typing.TypedDict):
    message: FieldDescription


class ClassifyMovieInputModel__InputTemplateVars:
    def __init__(self, prefix: str = ""):
        self.message = f"${prefix}message$"
        self.__val = f"${prefix}ClassifyMovieInput.val$"
    
    def __str__(self):
        return self.__val

class ClassifyMovieInputModel__OutputTemplateVars:
    def __init__(self):
        self.message = FieldTemplateVars(name="ClassifyMovieInput.message")
        self.json = "{ClassifyMovieInput.json}"

    