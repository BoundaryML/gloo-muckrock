# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import IPaymentValidation, IPaymentValidationStream, PaymentValidationData
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any


@baml.PaymentValidation.test(stream=True)
async def test_estimate_1(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Good afternoon,\n\n\n\nThe Owasso Police Department switched to a new records management system in September 2023 and all internal affairs files in the old records management system were expunged at that time. The records were not archived because the collective bargaining agreement between the City of Owasso and the Fraternal Order of Police requires that internal affairs records be expunged at different intervals. If the records would have been permanently archived, there would have been no way to expunge the records as required by the collective bargaining agreement. Therefore, the Professional Standards Division does not have internal affairs records for the years 2017-2022.\n\nIn accordance with the collective bargaining agreement, unless there is a tort or pending litigation, the Professional Standards Division must expunge its internal investigation files according to the following schedule:\n\n\n\n  1.  Written reprimands and notice of documented verbal counseling with no recurrence are expunged after eighteen (18) months from the date of discipline.\n\n  2.  Suspensions with no recurrence are expunged after three (3) years from the date of discipline.\n\n  3.  Unfounded, exonerated, not sustained, and no finding complaints may be maintained for no more than two (2) years from the date of the alleged occurrence.\n\nHowever, as previously mentioned, the Professional Standards Division expunged all of its internal affairs files in 2023 when the Owasso Police Department switched to a new records management system; therefore, the Professional Standards Division does not have individualized data or aggregate statistics for the requested items. There may be disciplinary records that are kept in employees’ master personnel files in the Human Resources Department, but those files are not maintained by the Police Department. Furthermore, at the sole discretion of the public body, a public body may keep personnel records confidential which relate to internal personnel investigations including examination and selection material for employment, hiring, appointment, promotion, demotion, discipline, or resignation unless such records pertain to final disciplinary action resulting in loss of pay, suspension, demotion of position, or termination (51 O.S. § 24A.7).\n\nIn reference to the request for use of force records, the Police Department does not maintain a database that is specific to use of force. Officers document use of force in the narrative of their reports. Therefore, a search for the requested use of force data would require staff from the Records Section to search each individual report that was completed during the specified time period to collect the data. The Professional Standards Division does not keep use of force data unless it is associated with an internal investigation.\n\nThere are over 19,000 cases from 2017-2022 that will need to be hand reviewed to determine if use of force was involved. This will require an extensive amount of research time with a charge of $15 an hour. This will be over the course of several weeks, it will not be a quick turnaround.\n\nIf you wish to proceed with your request or have any questions, please let us know.\n\n\n\nHave a wonderful day,\n\n\n\n\n\nMaddie Salfrank\n\nOwasso Police Records\n\n(918)376-1568\n\nMsalfrank@cityofowasso.com<mailto:Msalfrank@cityofowasso.com>\n\n\n\nDepartment Hours\n\nMonday-Thursday 7:30-5:30\n\nFriday 7:30-11:30\n\n\n\n“Your focus determines your reality”\n-Qui Gon Jinn")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_estimate_2(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Good Morning,\n\nI was able to talk to our Captain who will be researching the information for this request. He estimates it will take a minimum of 20 hours and possibly, due to his workload several weeks  to compile the requested information. Our fee is $18.00 an hour for research and compilation. Keep in mind it could take longer than the 20 hours thus increasing the final cost. I also want to let you know this would only cover the years from 2020-2022. There is no information for the years 2017-2021 due to this information was not tracked.\n\nPlease let me know how you wish to proceed.\n\nThank you.\n\n\nMelissa Robinson\nHPD Records supervisor\nOffice 620-694-2865\nFax 620-694-2862\n210 w 1st ave, Hutchinson ks 67501\nHpdrecords@renolec.com<https://www.hutchgov.com/214/Police-Department>\n")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_estimate_3(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Samuel Sinyangwe, in reference to the request you filed with our department:\n\n\n\n\n\nPursuant to the The Kansas Open Records Act, I hereby request the following records:\n\n\n\n1. the total number of use of force incidents reported from 2017-2022, separated by year.\n\n\n\n2. the total number of use of force incidents, separated by type of force and year, from 2017-2022 (for example, information that specifies the number of taser incidents in 2022, baton incidents in 2022, taser incidents in 2021, baton incidents in 2021, etc.)\n\n\n\n3. the total number of civilian complaints against law enforcement that were reported and the total number sustained from 2017-2022, separated by year.\n\n\n\n4. the total number of civilian complaints alleging law enforcement use of excessive force that were reported and the total number sustained from 2017-2022, separated by year.\n\n\n\n5. the total number of civilian complaints alleging biased policing or racial profiling that were reported and the total number sustained from 2017-2022, separated by year.\n\n\n\n6. the total number of civilian complaints alleging criminal conduct that were reported and the total number sustained from 2017-2022, separated by year.\n\n\n\n7. the total number of officer-involved shootings from 2017-2022, both fatal and non-fatal, separated by year.\n\n\n\n8. the total number of people who police used force against in 2022, broken down by race/ethnicity.\n\n\n\nWhen available, I would appreciate being sent individualized data in this request in spreadsheet format. If individualized data are unavailable, please send information that includes aggregate statistics for the item instead.\n\n\n\nNote that my requests for civilian complaints are specifically for civilian complaints, please do not include complaints filed by one officer/the department against another officer.\n\n\n\nThe requested documents will be made available to the general public, and this request is not being made for commercial purposes.\n\n\n\nIn the event that there are fees, I would be grateful if you would inform me of the total charges in advance of fulfilling my request. I would prefer the request filled electronically, by e-mail attachment if available or CD-ROM if not.\n\n\n\nThank you in advance for your anticipated cooperation in this matter. I look forward to receiving your response to this request within 3 business days, as the statute requires.\n\n\n\nThere will be a cost of $50 per hour to try and fulfill your request.  I have no way of knowing what the total cost will be in advance as I do not have any idea how long it will take to compile your stats.  I have no idea how complete our stats will be on this so some of your requested data may not be completed.  If you are willing to proceed with that cost please let me know.  I look forward to awaiting your reply.\n\n\n\nRay Mattas\n\nSupport Services Captain\n\nCity of Emporia - Police Department\n\n518 Mechanic St., Emporia, KS 66801|620-341-4353\n\nrmattas@emporiaks.gov<mailto:rmattas@emporiaks.gov>\n\n\n\n\n\nCONFIDENTIALITY NOTICE -- This e-mail transmission and any documents, files or previous e-mail messages attached to it may contain confidential or legally privileged information. If you are not the intended recipient, you are hereby notified that you must not read this transmission and that the disclosure, copying, printing, distribution, or use of any of the information contained in or attached to this transmission is STRICTLY PROHIBITED. If you have received this transmission in error, please notify the sender immediately by telephone or return e-mail and delete the original transmission and any attachments without reading or saving in any manner.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_estimate_4(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("We have received your KORA request. I am out of town at training until next week. I will have to get the information compiled by multiple people. I know how that the cist will be several hundred dollars, at least $350.00. Probably more. I can give you a closer quote when I return to the office next week.\n\n\n\nThank you for your patience.\n\n\n\nMelissa Robinson\n\nRecords Supervisor\nSent from my Verizon, Samsung Galaxy smartphone\n\nGet Outlook for Android<https://aka.ms/AAb9ysg>\n\n\n\nDisclaimer\n\n\n\nThe information contained in this communication from the sender is confidential. It is intended solely for use by the recipient and others authorized to receive it. If you are not the recipient, you are hereby notified that any disclosure, copying, distribution or taking action in relation of the contents of this information is strictly prohibited and may be unlawful.\n\n\n\nThis email has been scanned for viruses and malware, and may have been automatically archived by Mimecast Ltd, an innovator in Software as a Service (SaaS) for business. Providing a safer and more useful place for your human generated data. Specializing in; Security, archiving and compliance. To find out more visit the Mimecast website.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_exact_1(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Samuel,\n\nThe fee will be $25 cash or $26.50 with a card, please advise if you still want this information.\n\nBest Regards,\n\n\nPamela Weaver\nCriminal Records Clerk\npamela.weaver@tooeleco.gov\n     435-277-4255\n        [cid:image001.jpg@01DA7E8D.47431C80]\n\nAttention: Tooele County has adopted tooeleco.gov<http://tooelecity.gov> as its top level domain. Please update any contacts in your address book to use @tooeleco.gov.\n\nNOTICE OF PRIVILEGED AND CONFIDENTIAL COMMUNICATION.  This message is being sent from a government agency and may contain information which is confidential or privileged. If you are not the intended recipient, or a person responsible for delivering a copy to the intended recipient, please advise the sender immediately by reply e-mail. Immediately delete this message and any attachments without forwarding or making or retaining a copy. Thank you.\n")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_exact_2(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Good morning, Ms.Haskins,\nI have re-attached the response sent for this open record request on March 12, 2024. I am sorry for any confusion I was given to believe in January of 2024 that I was to be corresponding with Katherine Long.\nThe attached response was emailed to her.\nThank you, Hanna Manning\n\nHanna L. Manning\nUniversity Open Records Custodian\nDivision of Communications and Marketing , Kansas State University\n128 Dole Hall, 1525 Mid -Campus Dr.,Manhattan, KS 66506-0124\nopenrecords@ksu.edu T:(785)532-2535 F:(785)532-7355\n\nAttached Correspondence:\nMarch 12, 2024\nKatherine Long\nKlong@insider.com\n206 375 9280\nRE: Open Record Request\nDear Ms. Long:\nThis is in response to your Open Records Request to Kansas State University, in which you requested \nemails, including attachments, to or from the following individuals (Richard Linton, Thomas Lane, \nDebbie Mercer, Lindley Lund, Greg Willems, Marshall Stewart), in the date range October 8, 2023 \nthrough October 11, 2023 with keywords Israel, Gaza, Hamas, Palestine, Palestinian, Students for \nJustice in Palestine, SJP, Chabad, and Hillel. \nPlease be advised that some or all the requested records will not be produced if they are exempt \nfrom disclosure under K.S.A. 45-221. For example, any correspondence relating to identifiable \nUniversity students are protected by the Family Educational Rights and Privacy Act and are exempt \nfrom disclosure under KSA 45-221(a)(1). The records you requested may also be exempt from \ndisclosure under other exemptions including but not limited to K.S.A. 45-221(a)(14), and/or (30).\nI wanted to make you aware of these potential exemptions, as you are responsible for the expenses \nrequired to process your request regardless of whether any records are provided, redacted or \notherwise. You are responsible for pre-paying all estimated costs before we begin processing your \nrequest.\nWe anticipate the records responding to your request, such that they are available, will take a \nminimum of two hours of IT processing time, at $31.50 an hour. In addition, there would be an \nestimated one hour of Confidentiality/Privilege/Redaction review at $50.00 per hour. If you would \nlike the University to proceed with your request, please remit a check or money order made out to \nthe Kansas State University General Fund in the amount of $112.00, to my attention at the address \nbelow.\nYou will only pay the actual amount of expenses, whether that number is more or less than the \nestimate. You will receive a refund if the actual cost is less than the estimate. If the actual cost \nexceeds the estimate, you will be required to pay the difference before any responsive records are \nprovided.\nBest regards,\nHanna L. Manning\nUniversity Open Records Custodian\nDivision of Communications and Marketing, Kansas State University\n128 Dole Hall, 1525 Mid-Campus Dr., Manhattan, KS 66506-0124 \nopenrecords@ksu.edu T: (785)532-2535 F: (785)532-7355\u0000")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_exact_3(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("I sent an invoice on 3/18/2024 (MUDROCK) for a total of $70.40.\n\nI have received a check for $30.00 today.\n\nI have updated the invoice (MUCKROCK) showing partial payment, total $40.40.\n\n\n\nThank you,\n\n\n\n\n\nTerri Craig\n\nPolice Records Supervisor\n\nPolice Department | Police Records\n\n\n\nCity of St. Joseph\n\n501 Faraon St\n\nSt. Joseph, MO  64501\n\nP 816.271.4704\n\nstjoepd.info<http://www.stjoepd.info/> | facebook<https://www.facebook.com/sjpd.info> |X<https://www.twitter.com/citystjoemo>\n\nAttached Correspondence:\n St. Joseph Police Dept.\n Photocopy Statement\nCustomer Name Date Processed Description Cost\nMuckRock News\nSamuel Sinyangwe 3/18/2024 2013-2021\nUse of Force incidents\nCivilian complaints\n2 hours of research at $30.00/per hour $60.00\nflat rate shipping $10.40\nTcraig@stjosephmo.gov Total $70.40\n816-271-4704\nAmount Due upon receipt\nReturn To: PLEASE MAKE CHECKS PAYABLE TO:\nSt. Joseph Police Dept. CITY OF ST JOSEPH\nAttn: Records\n501 Faraon PLEASE RETURN INVOICE WITH PAYMENT\nSt. Joseph MO 64501\u0000\n\n St. Joseph Police Dept.\n Photocopy Statement\nCustomer Name Date Processed Description Cost\nMuckRock News\nSamuel Sinyangwe 3/18/2024 2013-2021\nUse of Force Incidents\nCivilian complaints\n2 hours of research at $30.00 per hour $60.00\nflate rate shipping $10.40\n3/22/2024 payment received -$30.00\ncheck # 11449\nTcraig@stjosephmo.gov Total $40.40\n816-271-4704\nAmount Due upon receipt\nReturn To: PLEASE MAKE CHECKS PAYABLE TO:\nSt. Joseph Police Dept. CITY OF ST JOSEPH\nAttn: Records\n501 Faraon PLEASE RETURN INVOICE WITH PAYMENT\nSt. Joseph MO 64501")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_exact_4(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Thanks,\nDepartment of the Treasury\n\nGovernment Records Access Unit\n\n(609) 633-1300\nAttached Correspondence:\nSTATE OF NEW JERSEY\nDEPARTMENT OF THE TREASURY\nGOVERNMENT RECORDS ACCESS UNIT\nPO Box 215\nTrenton, NJ 08625\nMarch 22, 2024\nJessie Trudeau\nMuckRock News\nDept MR 158436\nBoston, MA 02115\n158436-45231369@requests.muckrock.com\nReference: C214305 Date Received: February 28, 2024\nDear Jessie Trudeau:\nThe Department of the Treasury, Division of Pensions and Benefits, has completed their review of your Open\nPublic Records Act (OPRA) Requests C214305. You requested “digital records, in spreadsheet format (.csv or .xlsx), of\nthe number of police officers for cities/towns/counties in the state of New Jersey who are active employees enrolled in the\npension system, from 2010 (or the first year available) to 2022. The first and second columns of the spreadsheet should\nindicate the year and city/town/county, respectively, and the third should report the number of active employees of the\npolice force enrolled in the pension system.”\nThe Division of Pensions and Benefits has reviewed the OPRA request and is providing the following response. This\ninformation can be provided through a programming effort for a fee. \nUnder New Jersey Statutes Annotated 47:1A-5 (d), the custodian of the records may charge the requester a reasonable fee\nfor any extensive use of information technology, or for the labor cost of personnel providing the service that is actually\nincurred. The retrieval of the requested data requires 70 hours at a rate of $101.69 per hour. The total cost to retrieve the\nrequested data and generate a report is $7,118.30. Your report will be processed and sent approximately ten business days\nafter receipt of payment.\nTo pay by check, please make your check payable to the “State of New Jersey” and mail it to the address listed below. \nState of New Jersey\nDepartment of Treasury\nGovernment Records Access Unit\nPO Box 215\nTrenton, NJ 08625-0215\nShould you have any questions, please contact the Treasury Government Records Access Unit at (609) 633-1300 or by\nemail at AccessUnit.TreasuryGovernmentRecords@treas.nj.gov.\nSincerely,\nJacquelyn McCarty\nManager, Government Records Access Unit")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_must_pay_estimate(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Good Afternoon,\n\nThe Polk County Sheriff's Office has received your request for records. At\nthis time, we are estimating the cost to complete your request to be\n$800.00, based on 8 hours of the sheriff's time at a rate of $100 per hour\nto collate the data in the formats you have requested. If you wish to\nproceed with the request please provide payment and we will begin\nprocessing your request. If you wish to discuss alternatives for your\nrequest to lower the staff time and thus cost to produce records in a\ndifferent format, please let me know and we can hopefully figure something\nout.\n\nIf you have any questions feel free to contact me.\n\nMorgan\n\nMorgan Smith\nPolk County Counsel\nSmith.Morgan@co.polk.or.us\n(503) 623-8173, ext 1343\n(503)623-0896 Fax\n\nNotice: This e-mail may contain information that is privileged,\nconfidential, or otherwise exempt from disclosure under applicable law. If\nyou are not the addressee or it appears from the context or otherwise that\nyou have received this e-mail in error, please advise me immediately by\nreply e-mail, keep the contents confidential, and immediately delete the\nmessage and any attachments from your system.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_must_pay_estimate_2(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("This morning DTI provided the quote for the email search. Please see below.\n\n\n\n\n\nSent or received:   01/01/2021 thru 02/21/2024*\n\n*Note that typical email retention is only 12 months, but some employees retain older emails in their mailbox\n\n\n\nMailboxes:  All current DOE employees\n\n\n\nKeyword Search: “All emails to/from any @doe.k12.de.us address and any address ending in @discoveryed.com; All emails to/from any @doe.k12.de.us address and any address ending in @dupont.com”\n\n\n\nThe DTI Engineering Team’s labor rate is $38.00/hr.  The DTI estimate for this request is $38.00.  The total estimated time is 2 hours, and billable time is 1 hour, which covers the staff time to extract data that meets your criteria from our email archives.  This is only an estimate.  The actual cost may differ from the estimated cost. I will notify you if there is any change in cost.  The tasks that are involved with compiling this e-records request include:\n\n\n\n\n\n·            Configure search strings\n\n\n\n·            Conduct search\n\n\n\n·            Scrub results to ensure no unintended content is included\n\n\n\n·            Compile results\n\n·            Commit results to media\n\n\n\n\n\nThe Delaware Department of Education is responsible for redacting any emails deemed to be non-public, as defined by  the FOIA Chapter of the Delaware Code at 29 Del. C. sec. 100<http://delcode.delaware.gov/title29/c100/index.shtml>, including emails to/from the Controller General's Staff, General Assembly and staff (29 Del. C. sec. 10002(l)(16)). The cost for this work is $38.77 per hour. A time/cost estimate will be provided once we know how many emails are returned by the search. Payment to DOE will be required before this work begins.\n\n\n\nTo proceed with the search, please pay DTI directly using one of the following methods (please note your case number when making payment as DOE FOIA EREC0002597):\n\n\n\nCheck payable to “DTI” and send to:\n\n\n\nDTI FOIA Coordinator\n\nWilliam Penn Building\n\n801 Silver Lake Blvd\n\nDover, DE  19904\n\n\n\nCredit Card payments can be taken by contacting Kristen Shultz at 302-739-9577.\n\n\n\n\n\nPlease note that the records will be returned as Outlook data files. Any computer running Outlook should be able to open the files.\n\n\n\n\n\n\n\n\n\n\n\nDTI has this request in the queue but will not start work until the agency receives payment.  If payment is not received in 30 days, DTI will close the request.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_past_request(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("March 22, 2024\n\n\n\nTom Nash\n\nMuckRock News\n\nDEPT MR 160937\n\n263 Huntington Ave\n\nBoston, MA 02115\n\n160937-69112447@requests.muckrock.com<mailto:160937-69112447@requests.muckrock.com>\n\n\n\nRe:      All records associated with the death of Aaron Lynch\n\n\n\nOur Re:          24-FOIA-563\n\nPrior FOIA:    24-FOIA-144 Unpaid\n\n\n\nDear Zoé Orench-Rivera:\n\n\n\nIn response to your Freedom of Information request, please be advised that our records show a balance of $24.97 for charges in connection with your prior FOIA request (24-FOIA-144) which was billed on 1/30/24.\n\n\n\nSince more than thirty (30) days have elapsed since billing, in accordance with Section 2.2-3704(I) of the Code of Virginia (Freedom of Information Act), we will require payment of this outstanding balance before we will be able to process this or any future requests.\n\n\n\nImmediately remit the amount indicated on the enclosed invoice. Payments may now be made by a credit/debit card through our new online payment portal here<https://ffxpayments.virginiainteractive.org/payments/FCPD-FOIA> or you may pay by check.\n\n\n\nIf you wish to pay by check, please make your check payable to the “County of Fairfax” and mail it to my attention at the below listed address. Enclose a copy of your invoice and reference our control number on your check to ensure your payment is properly processed. Please note that payments must be paid in full and cannot be split.\n\n\n\nIf you feel that you received this notice in error, please send me a copy of a cancelled check or money order indicating payment was made so your account can be brought up to date.\n\n\n\nIf I can be of further assistance, please do not hesitate to contact me at (703) 246-4561 or FCPDFOIA@fairfaxcounty.gov<mailto:FCPDFOIA@fairfaxcounty.gov>.\n\n\nSincerely,\n\nJessica Cox\n\n\n\nJessica Cox, Manager,\n\nFOIA Compliance Division\n\n\n\nJC/mls")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_received_1(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("We have not received any payment for this. We can not continue with the request until the invoice is paid in full and we have proof of receipt.\n\n\n[A close up of a police card  Description automatically generated with low confidence]\n")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_received_2(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("We replied to this request previously. Please see attached invoice I am resending as well as payment instructions to proceed with your request.\n\n\n\nRegards,\n\n\n\n\n\n[A close up of a police card  Description automatically generated with low confidence]\n\nAttached Correspondence:\nstatistics data\nMailing Address Dept MR 159621\n263 Huntington Ave.\nCity, State, Zip Boston, MA, 02115\nBill To: MuckRock News\nThursday, March 7, 2024\nPD-0709\nExtensive Use $52.50\nPayments $0.00\nRemaining Balance $52.50\nCharges $0.00\nInvoice Number\nCase Number\nDate Printed\nSamuel Sinyangwe\nACCOUNT# 001-0000-341-3006\nUSA\nEmployee Date Worked Department Hours Billing Rate Subtotal\nAnnie Ciboch Records $52.50 3.5 $15.00\nExtensive Use $52.50\nAll Requests made will be handled in accordance with Florida State Statute Chapter 119. Information not \nreleasable under public record law will be redacted within report responses. If you have any questions about \nthis invoice please contact our office at 321-952-3461 or policerecords@pbfl.org.")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

@baml.PaymentValidation.test(stream=True)
async def test_sent_but_not_received_1(PaymentValidationImpl: IPaymentValidationStream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    content = to_str("Hello Mr. Sinyangwe,\n\n\n\nGood to hear from you but your check never arrived and thus your request was closed. Please go to the below link if you decide to make a new request.\n\n\n\n\n\nThank you for your interest in requesting DeKalb County records. The County is beginning its transition to “GovQA” which is an open records management system for local governments. To submit an Open Records Request, please utilize the link below and create an account.\n\n\n\nhttps://dekalbcountyga.govqa.us/WEBAPP/_rs/(S(actt1v5lhwmydjtkcwt3ymze))/login.aspx\n\n\n\n\n\n\nThank You,\n\n\n\nDeKalb County Police Department\n\n\n\nOpen Records Unit")
    deserializer = Deserializer[str](str) # type: ignore
    param = deserializer.from_string(content)
    async with PaymentValidationImpl(param) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()

